<transformation>
  <info>
    <name>schema_registry_json</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>/from_kafka/schema_formatter.mapping</directory>
    <parameters>
      <parameter>
        <name>Config.CDC.Batch.Schema.Registry.Url</name>
        <default_value>http://me:58081</default_value>
        <description/>
      </parameter>
    </parameters>
    <log>
      <trans-log-table>
        <connection/>
        <schema/>
        <table/>
        <size_limit_lines/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STATUS</id>
          <enabled>Y</enabled>
          <name>STATUS</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
          <subject/>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
          <subject/>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
          <subject/>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
          <subject/>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>STARTDATE</id>
          <enabled>Y</enabled>
          <name>STARTDATE</name>
        </field>
        <field>
          <id>ENDDATE</id>
          <enabled>Y</enabled>
          <name>ENDDATE</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>DEPDATE</id>
          <enabled>Y</enabled>
          <name>DEPDATE</name>
        </field>
        <field>
          <id>REPLAYDATE</id>
          <enabled>Y</enabled>
          <name>REPLAYDATE</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>Y</enabled>
          <name>LOG_FIELD</name>
        </field>
        <field>
          <id>EXECUTING_SERVER</id>
          <enabled>N</enabled>
          <name>EXECUTING_SERVER</name>
        </field>
        <field>
          <id>EXECUTING_USER</id>
          <enabled>N</enabled>
          <name>EXECUTING_USER</name>
        </field>
        <field>
          <id>CLIENT</id>
          <enabled>N</enabled>
          <name>CLIENT</name>
        </field>
      </trans-log-table>
      <perf-log-table>
        <connection/>
        <schema/>
        <table/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>SEQ_NR</id>
          <enabled>Y</enabled>
          <name>SEQ_NR</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>INPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>INPUT_BUFFER_ROWS</name>
        </field>
        <field>
          <id>OUTPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>OUTPUT_BUFFER_ROWS</name>
        </field>
      </perf-log-table>
      <channel-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>LOGGING_OBJECT_TYPE</id>
          <enabled>Y</enabled>
          <name>LOGGING_OBJECT_TYPE</name>
        </field>
        <field>
          <id>OBJECT_NAME</id>
          <enabled>Y</enabled>
          <name>OBJECT_NAME</name>
        </field>
        <field>
          <id>OBJECT_COPY</id>
          <enabled>Y</enabled>
          <name>OBJECT_COPY</name>
        </field>
        <field>
          <id>REPOSITORY_DIRECTORY</id>
          <enabled>Y</enabled>
          <name>REPOSITORY_DIRECTORY</name>
        </field>
        <field>
          <id>FILENAME</id>
          <enabled>Y</enabled>
          <name>FILENAME</name>
        </field>
        <field>
          <id>OBJECT_ID</id>
          <enabled>Y</enabled>
          <name>OBJECT_ID</name>
        </field>
        <field>
          <id>OBJECT_REVISION</id>
          <enabled>Y</enabled>
          <name>OBJECT_REVISION</name>
        </field>
        <field>
          <id>PARENT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>PARENT_CHANNEL_ID</name>
        </field>
        <field>
          <id>ROOT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>ROOT_CHANNEL_ID</name>
        </field>
      </channel-log-table>
      <step-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>N</enabled>
          <name>LOG_FIELD</name>
        </field>
      </step-log-table>
      <metrics-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>METRICS_DATE</id>
          <enabled>Y</enabled>
          <name>METRICS_DATE</name>
        </field>
        <field>
          <id>METRICS_CODE</id>
          <enabled>Y</enabled>
          <name>METRICS_CODE</name>
        </field>
        <field>
          <id>METRICS_DESCRIPTION</id>
          <enabled>Y</enabled>
          <name>METRICS_DESCRIPTION</name>
        </field>
        <field>
          <id>METRICS_SUBJECT</id>
          <enabled>Y</enabled>
          <name>METRICS_SUBJECT</name>
        </field>
        <field>
          <id>METRICS_TYPE</id>
          <enabled>Y</enabled>
          <name>METRICS_TYPE</name>
        </field>
        <field>
          <id>METRICS_VALUE</id>
          <enabled>Y</enabled>
          <name>METRICS_VALUE</name>
        </field>
      </metrics-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>100000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
    <created_user>-</created_user>
    <created_date>2022/06/24 14:00:35.312</created_date>
    <modified_user>-</modified_user>
    <modified_date>2022/07/07 10:41:10.038</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
  </notepads>
  <order>
    <hop>
      <from>ScriptValueMod: get schema_id+payload_json</from>
      <to>SelectValues: select schema_id</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ScriptValueMod: get schema_id+payload_json</from>
      <to>StreamLookup: key_schema_json</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ScriptValueMod: key_schema_payload+message_schema_payload</from>
      <to>SelectValues: select</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>SelectValues: select schema_id</from>
      <to>SimpleMapping: schema_registry_api.mapping</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>SimpleMapping: schema_registry_api.mapping</from>
      <to>StreamLookup: key_schema_json</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>SimpleMapping: schema_registry_api.mapping</from>
      <to>StreamLookup: message_schema_json</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>StreamLookup: key_schema_json</from>
      <to>StreamLookup: message_schema_json</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>StreamLookup: message_schema_json</from>
      <to>UserDefinedJavaClass: to connect schema</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>UserDefinedJavaClass: to connect schema</from>
      <to>ScriptValueMod: key_schema_payload+message_schema_payload</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>MappingInput: schema_formatter.mapping</from>
      <to>ScriptValueMod: get schema_id+payload_json</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>SelectValues: select</from>
      <to>MappingOutput: schema_formatter.mapping</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <step>
    <name>MappingInput: schema_formatter.mapping</name>
    <type>MappingInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>kafka_key</name>
        <type>Binary</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
      <field>
        <name>kafka_message</name>
        <type>Binary</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
      <field>
        <name>kafka_topic</name>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
      <field>
        <name>kafka_partition</name>
        <type>Integer</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
      <field>
        <name>kafka_offset</name>
        <type>Integer</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
      <field>
        <name>kafka_timestamp</name>
        <type>Integer</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>64</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>MappingOutput: schema_formatter.mapping</name>
    <type>MappingOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>1152</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ScriptValueMod: get schema_id+payload_json</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <compatible>N</compatible>
    <optimizationLevel>9</optimizationLevel>
    <jsScripts>
      <jsScript>
        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>
//var hex = new Packages.org.apache.commons.codec.binary.Hex();
if (kafka_key != null) {
	var buffer_key = Packages.java.nio.ByteBuffer.wrap(kafka_key);
	if( buffer_key.get() == 0 ){
		var key_schema_id = buffer_key.getInt();

        var bytes = Packages.java.util.Arrays.copyOfRange(kafka_key,buffer_key.position(),buffer_key.limit());

		//var key_payload_hex = new Packages.java.lang.String(hex.encode(bytes));
        var key_payload_json = new Packages.java.lang.String(bytes);
    }
} else {
   var key_schema_id = null;
   var key_payload_json = null;
}

if (kafka_message != null) {
	var buffer_message = Packages.java.nio.ByteBuffer.wrap(kafka_message);
	if( buffer_message.get() == 0 ){
		var message_schema_id = buffer_message.getInt();

        var bytes = Packages.java.util.Arrays.copyOfRange(kafka_message,buffer_message.position(),buffer_message.limit());

		//var message_payload_hex = new Packages.java.lang.String(hex.encode(bytes));
        var message_payload_json = new Packages.java.lang.String(bytes);
    }
} else {
   var message_schema_id = null;
   var message_payload_json = null;
}

</jsScript_script>
      </jsScript>
    </jsScripts>
    <fields>
      <field>
        <name>key_schema_id</name>
        <rename>key_schema_id</rename>
        <type>Integer</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
      <field>
        <name>key_payload_json</name>
        <rename>key_payload_json</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
      <field>
        <name>message_schema_id</name>
        <rename>message_schema_id</rename>
        <type>Integer</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
      <field>
        <name>message_payload_json</name>
        <rename>message_payload_json</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ScriptValueMod: key_schema_payload+message_schema_payload</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <compatible>N</compatible>
    <optimizationLevel>9</optimizationLevel>
    <jsScripts>
      <jsScript>
        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>
var key_schema_obj = JSON.parse(key_schema_json);
var key_payload_obj = JSON.parse(key_payload_json);
var key_with_schema = {
    schema: key_schema_obj,
	payload: key_payload_obj
}

if(key_with_schema.schema == null &amp;&amp; key_with_schema.payload == null) {
	var key_schema_payload = null;
} else {
	var key_schema_payload = JSON.stringify(key_with_schema);
}

var message_schema_obj = JSON.parse(message_schema_json);
var message_payload_obj = JSON.parse(message_payload_json);
var message_with_schema = {
    schema: message_schema_obj,
	payload: message_payload_obj
}

if(message_with_schema.schema == null &amp;&amp; message_with_schema.payload == null) {
	var message_schema_payload = null;
} else {
	var message_schema_payload = JSON.stringify(message_with_schema);
}</jsScript_script>
      </jsScript>
    </jsScripts>
    <fields>
      <field>
        <name>key_schema_payload</name>
        <rename>key_schema_payload</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
      <field>
        <name>message_schema_payload</name>
        <rename>message_schema_payload</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>832</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>SelectValues: select</name>
    <type>SelectValues</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>key_schema_payload</name>
        <rename>kafka_key</rename>
      </field>
      <field>
        <name>message_schema_payload</name>
        <rename>kafka_message</rename>
      </field>
      <field>
        <name>kafka_topic</name>
      </field>
      <field>
        <name>kafka_partition</name>
      </field>
      <field>
        <name>kafka_offset</name>
      </field>
      <field>
        <name>kafka_timestamp</name>
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>992</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>SelectValues: select schema_id</name>
    <type>SelectValues</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>key_schema_id</name>
      </field>
      <field>
        <name>message_schema_id</name>
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>672</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>SimpleMapping: schema_registry_api.mapping</name>
    <type>SimpleMapping</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <specification_method>rep_name</specification_method>
    <trans_object_id/>
    <trans_name>schema_registry_api.mapping</trans_name>
    <filename/>
    <directory_path>/from_kafka/schema_formatter.mapping</directory_path>
    <mappings>
      <input>
        <mapping>
          <input_step/>
          <output_step/>
          <main_path>Y</main_path>
          <rename_on_output>N</rename_on_output>
          <description/>
          <connector>
            <parent>key_schema_id</parent>
            <child>key_schema_id</child>
          </connector>
          <connector>
            <parent>message_schema_id</parent>
            <child>message_schema_id</child>
          </connector>
        </mapping>
      </input>
      <output>
        <mapping>
          <input_step/>
          <output_step/>
          <main_path>Y</main_path>
          <rename_on_output>N</rename_on_output>
          <description/>
          <connector>
            <parent>schema_id</parent>
            <child>schema_id</child>
          </connector>
          <connector>
            <parent>schema_json</parent>
            <child>schema_json</child>
          </connector>
        </mapping>
      </output>
      <parameters>
        <inherit_all_vars>Y</inherit_all_vars>
      </parameters>
    </mappings>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>672</xloc>
      <yloc>448</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>StreamLookup: key_schema_json</name>
    <type>StreamLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <from>SimpleMapping: schema_registry_api.mapping</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>key_schema_id</name>
        <field>schema_id</field>
      </key>
      <value>
        <name>schema_json</name>
        <rename>key_schema_json</rename>
        <default/>
        <type>String</type>
      </value>
    </lookup>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>384</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>StreamLookup: message_schema_json</name>
    <type>StreamLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <from>SimpleMapping: schema_registry_api.mapping</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>message_schema_id</name>
        <field>schema_id</field>
      </key>
      <value>
        <name>schema_json</name>
        <rename>message_schema_json</rename>
        <default/>
        <type>String</type>
      </value>
    </lookup>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>512</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>UserDefinedJavaClass: to connect schema</name>
    <type>UserDefinedJavaClass</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import com.github.xiaoyao9184.JsonSchemaConverter;


private JsonSchemaConverter converter;


public boolean init(StepMetaInterface stepMetaInterface, StepDataInterface stepDataInterface) {
  this.converter = new JsonSchemaConverter(10000);

  return parent.initImpl(stepMetaInterface, stepDataInterface);
}

public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

  Object[] r = getRow();

  if (r == null) {
    setOutputDone();
    return false;
  }

  r = createOutputRow(r, data.outputRowMeta.size());

  String keySchemaJson = get(Fields.In, "key_schema_json").getString(r);
  String keySchemaConnect = this.converter.toConnectJson(true, keySchemaJson);
  get(Fields.In, "key_schema_json").setValue(r, keySchemaConnect);

  String messageSchemaJson = get(Fields.In, "message_schema_json").getString(r);
  String messageSchemaConnect = this.converter.toConnectJson(false, messageSchemaJson);
  get(Fields.In, "message_schema_json").setValue(r, messageSchemaConnect);


  putRow(data.outputRowMeta, r);

  return true;
}
</class_source>
      </definition>
    </definitions>
    <fields>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps/>
    <target_steps/>
    <usage_parameters/>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>672</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step_error_handling>
  </step_error_handling>
  <slave-step-copy-partition-distribution>
  </slave-step-copy-partition-distribution>
  <slave_transformation>N</slave_transformation>
  <attributes/>
</transformation>
