/**
 * Kettle-Project-Toolbox project pipeline deploy script
 * build version in 
 * @see https://github.com/xiaoyao9184/Kettle-Project-Toolbox/blob/master/jenkins/deploy_kpt_project.jenkinsfile
 * Created by xiaoyao9184 on 2018/11/21.
 */

//Note:
//1. install job-dsl file-operation plugins
//2. change parameters default for linux or windows system
//3. disable script security for Job DSL
//4. script approval if need

pipeline {
    agent any
    parameters {
        string(name: 'ProjectName', description: 'project name!')
        string(name: 'ArchiveRegex', defaultValue: '^.*', description: 'Archive file name filter')
        string(name: 'DeployProfile', defaultValue: 'prod', description: 'The profile for deploy!')
        string(name: 'PDIURL', defaultValue: 'https://jaist.dl.sourceforge.net/project/pentaho/Data%20Integration/7.1/pdi-ce-7.1.0.0-12.zip', description: 'The PDI URL!')
        string(name: 'KPTURL', defaultValue: 'https://github.com/xiaoyao9184/Kettle-Project-Toolbox.git', description: 'The KPT git url!')

        string(name: 'PDIPath', defaultValue: '', description: 'data-integration directory')
        string(name: 'KPTPath', defaultValue: '', description: 'Kettle-Project-Toolbox directory')
        string(name: 'ArchivePath', defaultValue: '', description: 'archive directory!')
        string(name: 'DeployPath', defaultValue: '', description: 'project directory!')
        
        //defalut windows path
        string(name: 'Windows_PDIPath', defaultValue: 'D:\\Program\\Kettle\\data-integration', description: 'data-integration directory')
        string(name: 'Windows_KPTPath', defaultValue: 'D:\\Program\\Kettle\\Kettle-Project-Toolbox', description: 'Kettle-Project-Toolbox directory')
        string(name: 'Windows_ArchivePath', defaultValue: 'D:\\Archive', description: 'archive directory!')
        string(name: 'Windows_DeployPath', defaultValue: 'D:\\Program\\ETL', description: 'project directory!')
        
        //defalut linux path
        string(name: 'Unix_PDIPath', defaultValue: '/home/jenkins/kettle/data-integration', description: 'data-integration directory')
        string(name: 'Unix_KPTPath', defaultValue: '/home/jenkins/kettle/kettle-project-toolbox', description: 'Kettle-Project-Toolbox directory')
        string(name: 'Unix_ArchivePath', defaultValue: '/home/jenkins/archive', description: 'archive directory!')
        string(name: 'Unix_DeployPath', defaultValue: '/home/jenkins/etl', description: 'project directory!')
    }
    options {
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }
    stages {
        
        // ready

        stage('Create info') {
            steps {
                echo 'Create info...'
                script {
                    flow = [
                        useSharedLibrary: false,
                        updateKPT: false,
                        downloadPDI: false,
                        applyPatch: false,
                        activeProfile: false,
                        addJenkinsJob: false,
                        useProjectJobDslScript: false
                    ]
                    archive = [
                        path: null,
                        file: null,
                        version: null
                    ]
                    info = [
                        workPath: null,
                        projectPath: null,
                        projectName: "${params.ProjectName}"
                    ]

                    try {
                        // on linux the following code may be reporting an error
                        library 'KPT_Shared_Libraries@master'
                        if (deploy) {
                            println "Global variable 'deploy' exists use Shared Library"
                            flow."useSharedLibrary" = true
                        }
                    } catch(MissingPropertyException ex) {
                        println("Catching the MissingPropertyException, miss 'deploy' mean not use Shared Library!");
                    } catch(Exception ex) {
                        println("Catching unknow Exception, that mean not use Shared Library!");
                    }
                    
                    if (isUnix()) {
                        archive."path" = params.ArchivePath ?: "${params.Unix_ArchivePath}"
                        info."DeployPath" = params.DeployPath ?: "${params.Unix_DeployPath}"
                        info."PDIPath" = params.PDIPath ?: "${params.Unix_PDIPath}"
                        info."KPTPath" = params.KPTPath ?: "${params.Unix_KPTPath}"
                    } else {
                        archive."path" = params.ArchivePath ?: "${params.Windows_ArchivePath}"
                        info."DeployPath" = params.DeployPath ?: "${params.Windows_DeployPath}"
                        info."PDIPath" = params.PDIPath ?: "${params.Windows_PDIPath}"
                        info."KPTPath" = params.KPTPath ?: "${params.Windows_KPTPath}"
                    }
                }
            }
        }

        stage('Check PDI and KPT') {
            steps {
                echo 'Check kettle tool...'
                script {
                    if (flow.useSharedLibrary) {
                        //update KPT when not exist or KPT path is manage by git
                        flow."updateKPT" = deploy.check_path_not_exists_or_manage_by_git("${info.KPTPath}")

                        //download PDI with not exist
                        flow."downloadPDI" = !deploy.check_file_exists("${info.PDIPath}")
                    } else if (isUnix()) {
                        //update KPT when not exist or KPT path is manage by git
                        flow."updateKPT" = sh(
                                script: """
                                [ -d "${info.KPTPath}" ] && [ ! -d "${info.KPTPath}/.git" ] && echo "false" || echo "true"
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                        //download PDI with not exist
                        flow."downloadPDI" = sh(
                                script: """
                                [ -d "${info.PDIPath}" ] && echo "false" || echo "true"
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    } else {
                        //update KPT when not exist or KPT path is manage by git
                        flow."updateKPT" = bat(
                                script: """
                                @echo off
                                if exist "${info.KPTPath}" (
                                    if exist "${info.KPTPath}\\.git" (
                                        echo true
                                    ) else (
                                        echo false
                                    )
                                ) else (
                                    echo true
                                )
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                        //download PDI with not exist
                        flow."downloadPDI" = bat(
                                script: """
                                @echo off
                                if exist "${info.PDIPath}" (
                                    echo false
                                ) else (
                                    echo true
                                )
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    }
                }
            }
        }

        stage('Update KPT') {
            when { 
                expression { flow.updateKPT }
            }
            steps {
                dir("${info.KPTPath}") {
                    echo 'Update KPT...'
                    git branch: 'master',
                        url: "${info.KPTURL}"
                }
            }
        }

        stage('Download PDI') {
            when { 
                expression { flow.downloadPDI }
            }
            steps {
                echo 'Download PDI...'
                fileOperations([
                    fileDownloadOperation(
                        url: "${params.PDIURL}",
                        targetFileName: 'pdi-ce.zip',
                        targetLocation: "${WORKSPACE}",
                        userName: '',
                        password: ''),
                    fileUnZipOperation(
                        filePath: 'pdi-ce.zip',
                        targetLocation: "."),
                    folderCopyOperation(
                        destinationFolderPath: "${info.PDIPath}",
                        sourceFolderPath: './data-integration'),
                    folderDeleteOperation(
                        './data-integration'),
                    folderDeleteOperation(
                        './pdi-ce.zip')
                ])
            }
        }

        // deploy

        stage('Get archive info') {
            when { 
                expression { info.projectName } 
            }
            steps {
                echo 'Get archive info...'
                script {
                    def archiveLastFile = null
                    if (flow.useSharedLibrary) {
                        def archivePathList = deploy.get_path_list_file_info("${archive.path}/${info.projectName}")
                            .findAll { it.isFile && !it.isHidden }
                            .findAll { it.name.endsWith('.zip') }
                            .findAll { !it.name.contains('syncthing') }
                            .findAll { it.name ==~ "${params.ArchiveRegex}" }
                        if (!archivePathList) {
                            println "No any archive file!"
                            archive = null
                            return
                        }

                        archiveLastFile = archivePathList
                            // https://issues.jenkins-ci.org/browse/JENKINS-44924
                            // .sort{ it.name }
                            .last()
                    } else if (isUnix()) {
                        def fileName = null
                        dir("${archive.path}/${info.projectName}") {
                            fileName = sh(
                                    script: """
                                    ls -I "*syncthing*" -t1 | grep "\\[Deploy\\]${info.projectName}.*zip" | grep "${params.ArchiveRegex}" | head -n 1
                                    """, 
                                    returnStdout: true)
                                .trim()
                        }
                        archiveLastFile = [
                            absolutePath: "${archive.path}/${info.projectName}/${fileName}",
                            name: "${fileName}",
                        ]
                    } else {
                        def fileName = null
                        dir("${archive.path}\\${info.projectName}") {
                            fileName = bat(
                                    script: """
                                    @echo off
                                    for /F "TOKENS=*" %%a in ('dir "[Deploy]${info.projectName}*.zip" /b /A:-H /O:ND') do call :SUB "%%~a"
                                    echo %lastfile%
                                    exit /B

                                    :SUB file
                                    set file=%1
                                    set file=%file:"=%
                                    echo %file% | findstr /r ".*syncthing.*" >nul 2>&1 && goto CONTINUE || rem
                                    echo %file% | findstr /r "${params.ArchiveRegex}" >nul 2>&1 && rem || goto CONTINUE
                                    set lastfile=%file%
                                    exit /B
                                    :CONTINUE
                                    rem
                                    exit /B
                                    """, 
                                    returnStdout: true)
                                .trim()
                        }
                        archiveLastFile = [
                            absolutePath: "${archive.path}\\${info.projectName}\\${fileName}",
                            name: "${fileName}",
                        ]
                    }

                    println "Last archive is: ${archiveLastFile.absolutePath}"
                    archive = [
                        file: archiveLastFile.absolutePath,
                        version: archiveLastFile.name.take(archiveLastFile.name.lastIndexOf('.'))
                    ]
                }
            }
        }
        
        stage('Check archive info') {
            steps {
                echo "Check archive..."
                script {
                    if (!info.projectName) {
                        echo "No 'ProjectName' param!"
                        archive = null
                        currentBuild.result = 'UNSTABLE'
                    } else if (!archive) {
                        echo "No archive info!"
                        archive = null
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Create workspace info') {
            when { 
                expression { archive } 
            }
            steps {
                echo 'Create workspace info...'
                script {
                    if (isUnix()) {
                        info."workPath" = "${info.DeployPath}/${archive.version}"
                        info."projectPath" = "${info.workPath}/${info.projectName}"
                    } else {
                        info."workPath" = "${info.DeployPath}\\${archive.version}"
                        info."projectPath" = "${info.workPath}\\${info.projectName}"
                    }
                    
                    def projectPathExists = false
                    if (flow.useSharedLibrary) {
                        projectPathExists = deploy.check_file_exists("${info.projectPath}")
                    } else if (isUnix()) {
                        projectPathExists = sh(
                                script: """
                                [ -d "${info.projectPath}" ] && echo "true" || echo "false"
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    } else {
                        projectPathExists = bat(
                                script: """
                                @echo off
                                if exist "${info.projectPath}" (
                                    echo true
                                ) else (
                                    echo false
                                )
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    }
                    if (projectPathExists) {
                        println "Deploy target path already exists ${info.projectPath}, skip it!"
                        archive = null
                    } else {
                        println "Deploy project path is: ${info.projectPath}"
                    }
                }
            }
        }

        stage('Release archive to project path') {
            when { 
                expression { archive } 
            }
            steps {
                echo 'Release archive...'
                fileOperations([
                    fileUnZipOperation(
                        filePath: "${archive.file}",
                        targetLocation: "${info.projectPath}")
                ])
            }
        }

        stage('Check project') {
            when { 
                expression { archive } 
            }
            steps {
                echo 'Check project path...'
                script {
                    def patchFileExists = false
                    if (flow.useSharedLibrary && isUnix()) {
                        patchFileExists = 
                            deploy.check_file_exists("${info.projectPath}/patch.PatchPDI.sh")
                    } else if (flow.useSharedLibrary && !isUnix()) {
                        patchFileExists = 
                            deploy.check_file_exists("${info.projectPath}/patch.PatchPDI.bat")
                    } else if (isUnix()) {
                        patchFileExists = sh(
                                script: """
                                [ -f "${info.projectPath}/patch.PatchPDI.sh" ] && echo "true" || echo "false"
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    } else {
                        patchFileExists = bat(
                                script: """
                                @echo off
                                if exist "${info.projectPath}\\patch.PatchPDI.bat" (
                                    echo true
                                ) else (
                                    echo false
                                )
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    }
                    if (patchFileExists) {
                        flow."applyPatch" = true
                        println 'Patch needs to be applied!'
                    }

                    def profileFileExists = false
                    if (flow.useSharedLibrary) {
                        profileFileExists = deploy.check_file_exists("${info.projectPath}/.profile/.profile")
                    } else if (isUnix()) {
                        profileFileExists = sh(
                                script: """
                                [ -f "${info.projectPath}/.profile/.profile" ] && echo "true" || echo "false"
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    } else {
                        profileFileExists = bat(
                                script: """
                                @echo off
                                if exist "${info.projectPath}\\.profile\\.profile" (
                                    echo true
                                ) else (
                                    echo false
                                )
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    }
                    if (profileFileExists && params.DeployProfile) {
                        flow."activeProfile" = true
                        println 'Profile needs to be activated!'
                    }

                    def jenkinsPathExists = false
                    if (flow.useSharedLibrary) {
                        jenkinsPathExists = deploy.check_file_exists("${info.projectPath}/jenkins") 
                    } else if (isUnix()) {
                        jenkinsPathExists = sh(
                                script: """
                                [ -d "${info.projectPath}/jenkins" ] && echo "true" || echo "false"
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    } else {
                        jenkinsPathExists = bat(
                                script: """
                                @echo off
                                if exist "${info.projectPath}\\jenkins" (
                                    echo true
                                ) else (
                                    echo false
                                )
                                """, 
                                returnStdout: true)
                            .trim()
                            .toBoolean()
                    }
                    if (jenkinsPathExists) {
                        flow."addJenkinsJob" = true
                        println 'JenkinsJob needs to be added!'

                        def useProjectJobDslScript = false
                        if (flow.useSharedLibrary) {
                            useProjectJobDslScript = deploy.check_file_exists("${info.projectPath}/jenkins/deploy_kpt_project_jenkinsfile.groovy") 
                        } else if (isUnix()) {
                            useProjectJobDslScript = sh(
                                    script: """
                                    [ -f "${info.projectPath}/jenkins/deploy_kpt_project_jenkinsfile.groovy" ] && echo "true" || echo "false"
                                    """, 
                                    returnStdout: true)
                                .trim()
                                .toBoolean()
                        } else {
                            useProjectJobDslScript = bat(
                                    script: """
                                    @echo off
                                    if exist "${info.projectPath}\\jenkins\\deploy_kpt_project_jenkinsfile.groovy" (
                                        echo true
                                    ) else (
                                        echo false
                                    )
                                    """, 
                                    returnStdout: true)
                                .trim()
                                .toBoolean()
                        }

                        if (useProjectJobDslScript) {
                            flow."useProjectJobDslScript" = true
                            println 'JenkinsJob use project script to be added!'
                        }
                    }
                }
            }
        }

        stage('Link PDI and KPT') {
            when { 
                expression { archive } 
            }
            steps {
                echo 'Link PDI and KPT...'
                script {
                    if (isUnix()) {
                        sh "bash ${info.KPTPath}/tool/LINK_KPT.sh ${info.workPath} ${info.PDIPath} <&-" 
                    } else {
                        bat "call ${info.KPTPath}\\tool\\LINK_KPT.bat ${info.workPath} ${info.PDIPath}"
                    }
                }
            }
        }

        stage('Apply PDI patch') {
            when { 
                expression { archive && flow.applyPatch } 
            }
            steps {
                dir("${info.projectPath}") {
                    echo 'Apply PDI patch...'
                    script {
                        if (isUnix()) {
                            sh 'bash patch.PatchPDI.sh <&-' 
                        } else {
                            bat 'call patch.PatchPDI.bat'
                        }
                    }
                }
            }
        }

        stage('Active project profile') {
            when { 
                expression { archive && flow.activeProfile } 
            }
            steps {
                dir("${info.projectPath}") {
                    echo 'Active project profile...'
                    script {
                        if (flow.useSharedLibrary) {
                            try {
                                deploy.rename_file(
                                    "${info.projectPath}/.profile/.profile",
                                    "${info.projectPath}/.profile/${params.DeployProfile}.profile") 
                            } catch (Exception ex) {
                                println("Catching unknow Exception, that mean cant use Shared Library rename file!");
                                fileOperations([
                                    fileRenameOperation(
                                        source: ".profile/.profile",
                                        destination: ".profile/${params.DeployProfile}.profile")
                                ])
                            }
                        } else if (isUnix()) {
                            sh """
                            mv "./.profile/.profile" "./.profile/${params.DeployProfile}.profile"
                            """
                        } else {
                            bat """
                            @echo off
                            cd ".profile"
                            REN ".profile" "${params.DeployProfile}.profile"
                            """
                        }
                    }
                }
            }
        }

        stage('Add Jenkins scheduling job') {
            when { 
                expression { archive && flow.addJenkinsJob } 
            }
            steps {
                echo 'Add Jenkins scheduling job...'
                script {
                    if (flow.useProjectJobDslScript) {
                        dir("${info.projectPath}") {
                            jobDsl(
                                targets: "jenkins/deploy_kpt_project_jenkinsfile.groovy", 
                                removedJobAction: 'DELETE', 
                                removedViewAction: 'DELETE',
                                additionalParameters: [
                                    ProjectPath: "${info.projectPath}"
                                ],
                                lookupStrategy: 'SEED_JOB',
                                sandbox: false
                            )
                        }
                    } else {
                        dir("${info.KPTPath}") {
                            jobDsl(
                                targets: "jenkins/deploy_kpt_project_jenkinsfile.groovy", 
                                removedJobAction: 'DELETE', 
                                removedViewAction: 'DELETE',
                                additionalParameters: [
                                    ProjectPath: "${info.projectPath}"
                                ],
                                lookupStrategy: 'SEED_JOB',
                                sandbox: false
                            )
                        }
                    }
                }
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}